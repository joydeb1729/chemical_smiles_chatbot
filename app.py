import streamlit as st
import base64
import os
from io import BytesIO

# Import local modules
from src.models.llama_model import LlamaModel
from src.chains.chemical_extractor import ChemicalExtractor
from src.services.smiles_lookup import SMILESLookup
from src.services.molecule_renderer import MoleculeRenderer
from src.services.molecule_3d_visualizer import Molecule3DVisualizer
from src.utils.logging_utils import setup_logger
from config.settings import APP_TITLE, APP_DESCRIPTION, MODEL_PATH

# Setup logging
logger = setup_logger(__name__)

def load_css():
    """Load custom CSS"""
    with open(os.path.join("static", "css", "style.css")) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

def get_chemical_description(chemical_name, extractor):
    """
    Get a brief 1-2 sentence description of a chemical compound using LLM.
    
    Args:
        chemical_name (str): Name of the chemical
        extractor: ChemicalExtractor instance with LLM
        
    Returns:
        str: Brief description of the chemical
    """
    try:
        # Create a prompt for generating a short description
        description_prompt = f"""
You are a chemistry expert. Provide a brief 1-2 sentence description of {chemical_name}.
Include its chemical formula if known, and mention its main properties or uses.
Keep it concise and informative.

Chemical: {chemical_name}

Description:
"""
        
        # Generate description using the LLM
        logger.info(f"Generating description for {chemical_name} using LLM")
        description = extractor.llm.generate(description_prompt)
        
        # Clean up the response
        description = description.strip()
        
        # If the response is too long, truncate to first 2 sentences
        sentences = description.split('.')
        if len(sentences) > 2:
            description = '. '.join(sentences[:2]) + '.'
            
        logger.info(f"Generated description for {chemical_name}: {description[:100]}...")
        return description
        
    except Exception as e:
        logger.error(f"Error generating description for {chemical_name}: {str(e)}")
        # Fallback to generic message if LLM fails
        return "This chemical is commonly used in research and industrial applications."

def main():
    # Load the model and initialize components
    @st.cache_resource
    def load_model():
        logger.info("Loading LLaMA model...")
        model = LlamaModel()
        return model
    
    @st.cache_resource
    def init_components(_model):
        # Using leading underscore to tell Streamlit not to hash this argument
        extractor = ChemicalExtractor(_model)
        smiles_lookup = SMILESLookup()
        renderer = MoleculeRenderer()
        visualizer_3d = Molecule3DVisualizer()
        return extractor, smiles_lookup, renderer, visualizer_3d
    
    # Page configuration
    st.set_page_config(
        page_title=APP_TITLE,
        page_icon="🧪",
        layout="wide"
    )
    
    # Load custom CSS
    load_css()
    
    # App header
    st.title(APP_TITLE)
    st.markdown(APP_DESCRIPTION)
    
    # Initialize model and components
    with st.spinner("Loading model and components..."):
        model = load_model()
        extractor, smiles_lookup, renderer, visualizer_3d = init_components(model)
    
    # User input
    user_query = st.text_input("Enter your chemical query:", placeholder="What is benzene?")
    
    if user_query:
        with st.spinner("Processing your query..."):
            # Log the query for debugging
            logger.info(f"Processing query: {user_query}")
            
            try:
                # Extract chemical name from query
                chemical_name = extractor.extract_chemical_name(user_query)
                
                if chemical_name:
                    st.success(f"Detected chemical: {chemical_name}")
                    
                    # Show chemical description immediately (generated by LLM)
                    with st.spinner("Generating description..."):
                        description = get_chemical_description(chemical_name, extractor)
                    st.info(f"**About {chemical_name}:** {description}")
                    
                    # Look up SMILES
                    try:
                        smiles = smiles_lookup.get_smiles(chemical_name)
                        if smiles:
                            st.info(f"**SMILES:** `{smiles}`")
                            
                            # Create tabs for different visualizations
                            tab1, tab2, tab3, tab4 = st.tabs(["2D Structure", "3D Standard View", "3D Enhanced View", "Bond Analysis"])
                            
                            with tab1:
                                st.subheader("2D Molecular Structure")
                                # Render 2D molecule
                                img = renderer.render_molecule(smiles)
                                if img:
                                    st.image(img, caption=f"2D Structure of {chemical_name}")
                                else:
                                    st.warning("Could not generate 2D structure")
                            
                            with tab2:
                                st.subheader("3D Standard Visualization")
                                try:
                                    with st.spinner("Generating 3D standard view..."):
                                        view_3d, bond_angles = visualizer_3d.visualize_molecule_standard(smiles, chemical_name)
                                    
                                    if view_3d:
                                        # Display the 3D visualization using _make_html() for Streamlit
                                        html_content = view_3d._make_html()
                                        st.components.v1.html(html_content, width=820, height=620)
                                        st.success("Interactive 3D model generated! You can rotate, zoom, and explore the molecule.")
                                    else:
                                        st.error("Could not generate 3D standard view")
                                        
                                except Exception as e:
                                    st.error(f"Error generating 3D standard view: {str(e)}")
                            
                            with tab3:
                                st.subheader("3D Enhanced Visualization")
                                try:
                                    with st.spinner("Generating 3D enhanced view..."):
                                        view_3d_enhanced = visualizer_3d.visualize_molecule_enhanced(smiles, chemical_name)
                                    
                                    if view_3d_enhanced:
                                        # Display the enhanced 3D visualization using _make_html() for Streamlit
                                        html_content_enhanced = view_3d_enhanced._make_html()
                                        st.components.v1.html(html_content_enhanced, width=820, height=620)
                                        st.success("Enhanced 3D model generated!")
                                        st.info("🎮 **Controls:** Left click + drag to rotate, scroll to zoom, right click + drag to pan")
                                    else:
                                        st.error("Could not generate 3D enhanced view")
                                        
                                except Exception as e:
                                    st.error(f"Error generating 3D enhanced view: {str(e)}")
                            
                            with tab4:
                                st.subheader("Bond Angle Analysis")
                                try:
                                    # Get bond angles from the standard visualization
                                    if 'bond_angles' in locals() and bond_angles:
                                        st.write(f"**Total Bond Angles Found:** {len(bond_angles)}")
                                        
                                        # Create a dropdown to show bond angles
                                        with st.expander("📐 View Bond Angles Details", expanded=False):
                                            if len(bond_angles) > 0:
                                                # Create a formatted table
                                                bond_data = []
                                                for i, (n1, atom1, atom2, n2, angle) in enumerate(bond_angles):
                                                    bond_data.append({
                                                        "Angle #": i + 1,
                                                        "Atoms": f"{n1}-{atom1}-{atom2}-{n2}",
                                                        "Angle (°)": f"{angle:.2f}°"
                                                    })
                                                
                                                # Display in a nice table format
                                                import pandas as pd
                                                df = pd.DataFrame(bond_data)
                                                st.dataframe(df, use_container_width=True)
                                                
                                                # Show statistics
                                                angles_only = [angle for _, _, _, _, angle in bond_angles]
                                                col1, col2, col3 = st.columns(3)
                                                with col1:
                                                    st.metric("Average Angle", f"{sum(angles_only)/len(angles_only):.2f}°")
                                                with col2:
                                                    st.metric("Min Angle", f"{min(angles_only):.2f}°")
                                                with col3:
                                                    st.metric("Max Angle", f"{max(angles_only):.2f}°")
                                            else:
                                                st.warning("No bond angles could be calculated for this molecule")
                                    else:
                                        st.info("Generate 3D Standard View first to calculate bond angles")
                                        
                                except Exception as e:
                                    st.error(f"Error analyzing bond angles: {str(e)}")
                        else:
                            st.warning("Could not find SMILES representation for this chemical")
                            # Still show 2D structure if available
                            img = renderer.render_molecule(smiles) if smiles else None
                            if img:
                                st.image(img, caption=f"2D Structure of {chemical_name}")
                            
                    except Exception as e:
                        st.error(f"Error looking up chemical: {str(e)}")
                        logger.error(f"SMILES lookup error: {str(e)}")
                else:
                    st.warning("No specific chemical detected in your query. Please try again with a different query.")
                    logger.warning(f"No chemical detected in query: {user_query}")
            except Exception as e:
                st.error(f"Error processing query: {str(e)}")
                logger.error(f"Query processing error: {str(e)}", exc_info=True)
    
    # Additional information
    with st.expander("About this app"):
        st.markdown("""
        This app uses a local LLaMA model to extract chemical names from natural language queries,
        then fetches their SMILES representation from OPSIN, and renders the molecular structure.
        """)
        
    # Debug section
    if st.checkbox("Show debug information", False):
        st.subheader("Debug Information")
        st.write("This section is for troubleshooting the app.")
        
        with st.expander("Test chemical extraction"):
            test_query = st.text_input("Test query:", "What is benzene?")
            if st.button("Test extraction"):
                st.write(f"Testing extraction for: '{test_query}'")
                try:
                    # Use the LLM-based extraction
                    result = extractor.extract_chemical_name(test_query)
                    
                    if result:
                        st.success(f"Extracted chemical: {result}")
                    else:
                        st.warning("No chemical detected in the query")
                    
                except Exception as e:
                    st.error(f"Error during test: {str(e)}")

if __name__ == "__main__":
    main()
